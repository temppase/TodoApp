<SubHeader Title="Todo's"/>
<ul class="list-group">
    @foreach (var t in Todos)
    {
        @if (t.IsCompleted)
        {
            <li class="list-group-item list-group-item-secondary my-2"
                @onmouseover="(()=>IDset = t.Id.ToString())"
                @onclick="UnCompleteTodo">

                <del style="font-weight:bold">@t.Label</del>
                <del class="mx-2">@t.Description</del>

            </li>
        }
        else
        {
            if (t.Priority == "High")
            {
                <li class="list-group-item list-group-item-danger my-2"
                    @onmouseover="(()=>IDset = t.Id.ToString())"
                    @onclick="CompleteTodo">
                    <p style="font-weight:bold">@t.Label</p>
                    <p class="mx-2">@t.Description</p>
                    @if (t.Status == "Started")
                    {
                        <p class="mx-2">@t.Status : @t.LocalTime</p>
                    }

                </li>
            }
            if (t.Priority == "Medium")
            {
                <li class="list-group-item list-group-item-success my-2"
                    @onmouseover="(()=>IDset = t.Id.ToString())"
                    @onclick="CompleteTodo">
                    <p style="font-weight:bold">@t.Label</p>
                    <p class="mx-2">@t.Description</p>
                    @if (t.Status == "Started")
                    {
                        <p class="mx-2">@t.Status : @t.LocalTime</p>
                    }
                </li>
            }
            if (t.Priority == "Low")
            {
                <li class="list-group-item list-group-item-warning my-2"
                    @onmouseover="(()=>IDset = t.Id.ToString())"
                    @onclick="CompleteTodo">
                    <p style="font-weight:bold">@t.Label</p>
                    <p class="mx-2">@t.Description</p>
                    @if (t.Status == "Started")
                    {
                        <p class="mx-2">@t.Status : @t.LocalTime</p>
                    }
                </li>
            }
        }
    }
</ul>
<button class="btn btn-danger btn-sm"
        @onclick="DeleteRecords">
    Delete completed
</button>
@code {

    public string IDset { get; set; }
    MongoCRUD mydb = new MongoCRUD("MyMongoDb");
    TodoModel todo = new TodoModel();
    TodoModel Complete = new TodoModel();
    List<TodoModel> Todos;
    Tables table = new Tables();
    protected override Task OnInitializedAsync()
    {
        GetData();
        return base.OnInitializedAsync();
    }
    public void GetData()
    {

        Todos = mydb.LoadRecords<TodoModel>(table.Todo);

    }
    public void CompleteTodo()
    {
        GetTodo();
        Console.WriteLine($"     Complete ID: {IDset.ToString()}");
        ObjectId Id = new ObjectId(IDset);
        mydb.UpsertRecord(table.Todo, Id,
                        new TodoModel
                        {
                            Id = Id,
                            Date = DateTime.Now,
                            LocalTime = DateTime.Now.ToString("yyyy.MM.dd HH:mm"),
                            Label = Complete.Label,
                            Description = Complete.Description,
                            Priority = Complete.Priority,
                            Status = Complete.Status,
                            IsCompleted = true
                        });
        OnInitializedAsync();
    }
    public void UnCompleteTodo()
    {
        GetTodo();
        Console.WriteLine($"     UnComplete ID: {IDset.ToString()}");
        ObjectId Id = new ObjectId(IDset);
        mydb.UpsertRecord(table.Todo, Id,
                        new TodoModel
                        {
                            Id = Id,
                            Date = DateTime.Now,
                            LocalTime = DateTime.Now.ToString("yyyy.MM.dd HH:mm"),
                            Label = Complete.Label,
                            Description = Complete.Description,
                            Priority = Complete.Priority,
                            Status = Complete.Status,
                            IsCompleted = false
                        });
        OnInitializedAsync();
    }
    public void GetTodo()
    {
        ObjectId Id = new ObjectId(IDset);
        Complete = mydb.LoadRecordById<TodoModel>(table.Todo, Id);

    }

    public void DeleteRecords()
    {
        foreach (var t in Todos)
        {
            if (t.IsCompleted == true)
            {
                ObjectId Id = t.Id;
                Console.WriteLine($"     Delete ID: {t.Id.ToString()} | Label : {t.Label}");
                mydb.DeleteRecord<TodoModel>(table.Todo, Id);
            }

        }

        OnInitializedAsync();
    }
}
